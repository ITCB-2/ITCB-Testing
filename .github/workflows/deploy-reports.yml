name: Deploy Playwright HTML Report to GitHub Pages

on:
  workflow_run:
    workflows: ['Sanity Tests', 'Regression Tests']
    types:
      - completed
  workflow_dispatch:

permissions:
  pages: write
  id-token: write
  actions: read
  contents: read

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Create reports directory structure
        run: mkdir -p reports latest

      - name: Set workflow variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          else
            WORKFLOW_NAME=""
            RUN_NUMBER="${{ github.run_number }}"
          fi

          # Set artifact name based on workflow
          case "$WORKFLOW_NAME" in
            *"Sanity"*|*"sanity"*) ARTIFACT_NAME="sanity-playwright-report-$RUN_NUMBER" ;;
            *"Regression"*|*"regression"*) ARTIFACT_NAME="regression-playwright-report-$RUN_NUMBER" ;;
            *) ARTIFACT_NAME="playwright-report-$RUN_NUMBER" ;;
          esac

          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV
          echo "RUN_NUMBER=$RUN_NUMBER" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "WORKFLOW_DIR=$(echo "$WORKFLOW_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          # For manual dispatch, we'll get the actual run number from the downloaded artifact later
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "MANUAL_DISPATCH=true" >> $GITHUB_ENV
          fi

      - name: Download artifacts
        id: download
        uses: dawidd6/action-download-artifact@v11
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./reports-temp/
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id || github.run_id }}
          if_no_artifact_found: warn
        continue-on-error: true

      - name: Handle missing artifacts
        if: steps.download.outputs.found_artifact != 'true'
        run: |
          echo "‚ö†Ô∏è No artifacts found for this workflow run"
          echo "This might happen if:"
          echo "  - The workflow run failed before generating reports"
          echo "  - Artifacts weren't uploaded due to quota limits"
          echo "  - Artifact retention period expired"

      - name: Deploy Playwright report directly
        run: |
          if [ -d "./reports-temp" ] && [ "$(ls -A ./reports-temp)" ]; then
            # Check if we have a direct index.html in reports-temp (main report)
            if [ -f "./reports-temp/index.html" ]; then
              echo "üìä Found main HTML report in reports-temp root"
              
              # Copy the main HTML report and its assets (excluding trace)
              cp "./reports-temp/index.html" ./index.html
              echo "‚úÖ Main HTML report set as root index.html"
              
              # Copy all other files and directories EXCEPT trace directory
              find "./reports-temp" -mindepth 1 -maxdepth 1 ! -name "trace" ! -name "index.html" -exec cp -r {} ./ \;
              echo "üìÇ Copied report assets (excluding trace directory)"
              
              echo "REPORTS_AVAILABLE=true" >> $GITHUB_ENV
              echo "‚úÖ Playwright HTML report deployed successfully"
            else
              echo "‚ùå No index.html found in reports-temp root"
              
              # Fallback: check if it's nested in a subdirectory (old behavior)
              FIRST_ARTIFACT_DIR=$(find ./reports-temp -mindepth 1 -maxdepth 1 -type d | head -1)
              if [ -n "$FIRST_ARTIFACT_DIR" ] && [ -f "$FIRST_ARTIFACT_DIR/index.html" ]; then
                echo "üìÅ Found nested artifact directory: $FIRST_ARTIFACT_DIR"
                cp "$FIRST_ARTIFACT_DIR/index.html" ./index.html
                find "$FIRST_ARTIFACT_DIR" -mindepth 1 -maxdepth 1 ! -name "trace" ! -name "index.html" -exec cp -r {} ./ \;
                echo "‚úÖ Fallback deployment completed"
                echo "REPORTS_AVAILABLE=true" >> $GITHUB_ENV
              else
                echo "‚ùå No valid HTML report found anywhere"
                echo "REPORTS_AVAILABLE=false" >> $GITHUB_ENV
              fi
            fi
          else
            echo "‚ö†Ô∏è No reports found - creating placeholder"
            echo "<html><body><h1>No Playwright Report Available</h1><p>Tests may not have run or artifacts missing.</p></body></html>" > ./index.html
            echo "REPORTS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Add deployment status to summary
        run: |
          echo "üé≠ Playwright Report Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$REPORTS_AVAILABLE" = "true" ]; then
            echo "‚úÖ Status: Playwright HTML report deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìä Direct Report URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
            echo "üéØ Access: GitHub Pages opens directly to the Playwright test report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üîç Debug Info:" >> $GITHUB_STEP_SUMMARY
            echo "- Report index.html: $([ -f ./index.html ] && echo 'Present' || echo 'Missing')" >> $GITHUB_STEP_SUMMARY
            echo "- Report size: $([ -f ./index.html ] && wc -c < ./index.html || echo 'N/A') bytes" >> $GITHUB_STEP_SUMMARY
            echo "- Data directory: $([ -d ./data ] && echo 'Present' || echo 'Missing')" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Status: Deployment completed but test artifacts were unavailable" >> $GITHUB_STEP_SUMMARY
            echo "üì¶ Issue: Likely GitHub storage quota exceeded or test artifacts missing" >> $GITHUB_STEP_SUMMARY
            echo "üîß Action: Reports will auto-deploy once quota is available" >> $GITHUB_STEP_SUMMARY
            echo "üìä Site URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
            echo "üìã Placeholder: Created with explanation of the issue" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚è∞ Deployed at: $(TZ='Asia/Jerusalem' date '+%B %d, %Y at %H:%M %Z')" >> $GITHUB_STEP_SUMMARY
