name: Deploy Playwright Reports to GitHub Pages

on:
  # Triggered by other workflows completing
  workflow_run:
    workflows: ['Sanity Tests', 'Regression Tests']
    types:
      - completed

  # Manual trigger for deployment
  workflow_dispatch:
    inputs:
      source_workflow:
        description: 'Source workflow to deploy reports from'
        required: true
        default: 'sanity-tests'
        type: choice
        options:
          - sanity-tests
          - nightly-regression-tests

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' || 
      github.event.workflow_run.conclusion == 'failure' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Create reports directory structure
        run: |
          mkdir -p reports latest

      - name: Set workflow variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          else
            WORKFLOW_NAME="${{ github.event.inputs.source_workflow }}"
            RUN_NUMBER="${{ github.run_number }}"
          fi

          # Set artifact name based on workflow
          case "$WORKFLOW_NAME" in
            *"Sanity"*|*"sanity"*) ARTIFACT_NAME="sanity-playwright-report-$RUN_NUMBER" ;;
            *"Regression"*|*"regression"*) ARTIFACT_NAME="regression-playwright-report-$RUN_NUMBER" ;;
            *) ARTIFACT_NAME="playwright-report-$RUN_NUMBER" ;;
          esac

          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV
          echo "RUN_NUMBER=$RUN_NUMBER" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "WORKFLOW_DIR=$(echo "$WORKFLOW_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          # For manual dispatch, we'll get the actual run number from the downloaded artifact later
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "MANUAL_DISPATCH=true" >> $GITHUB_ENV
          fi

      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v11
        id: download-artifacts
        continue-on-error: true
        with:
          name: ${{ github.event_name == 'workflow_run' && (contains(github.event.workflow_run.name, 'Sanity') && format('sanity-playwright-report-{0}', github.event.workflow_run.run_number) || contains(github.event.workflow_run.name, 'Regression') && format('regression-playwright-report-{0}', github.event.workflow_run.run_number) || format('playwright-report-{0}', github.event.workflow_run.run_number)) || (github.event.inputs.source_workflow == 'sanity-tests' && 'sanity-playwright-report-*' || github.event.inputs.source_workflow == 'regression-tests' && 'regression-playwright-report-*' || 'playwright-report-*') }}
          path: ./reports-temp/
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || '' }}
          workflow: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.source_workflow == 'sanity-tests' && 'sanity.yml' || 'nightly-regression.yml') || '' }}
          if_no_artifact_found: warn
          name_is_regexp: ${{ github.event_name == 'workflow_dispatch' && 'true' || 'false' }}

      - name: Handle missing artifacts
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è Failed to download artifacts - likely due to storage quota or missing artifacts"
          echo "üìä This usually happens when:"
          echo "  - GitHub storage quota is exceeded"
          echo "  - Artifacts weren't uploaded due to quota limits"
          echo "  - Artifact retention period expired"
          echo ""
          echo "üîß Creating minimal index page with explanation..."

          # Create a basic index page explaining the situation
          mkdir -p ./reports-temp
          {
            echo '<!DOCTYPE html>'
            echo '<html>'
            echo '<head>'
            echo '    <title>Test Report - Artifact Issue</title>'
            echo '    <style>'
            echo '        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }'
            echo '        .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin: 20px 0; }'
            echo '        .info { background: #d1ecf1; border: 1px solid #bee5eb; padding: 15px; border-radius: 8px; margin: 20px 0; }'
            echo '    </style>'
            echo '</head>'
            echo '<body>'
            echo '    <h1>üé≠ Test Report Unavailable</h1>'
            echo '    <div class="warning">'
            echo '        <h3>‚ö†Ô∏è Artifact Storage Issue</h3>'
            echo '        <p>The test report artifacts could not be deployed due to GitHub storage quota limits.</p>'
            echo '    </div>'
            echo '    <div class="info">'
            echo '        <h4>üìä What this means:</h4>'
            echo '        <ul style="text-align: left; display: inline-block;">'
            echo '            <li>Tests likely completed successfully</li>'
            echo '            <li>Reports were generated but could not be uploaded</li>'
            echo '            <li>GitHub has storage quotas that reset periodically</li>'
            echo '        </ul>'
            echo '        <h4>üîß Next steps:</h4>'
            echo '        <ul style="text-align: left; display: inline-block;">'
            echo '            <li>Reports will auto-deploy once quota is available</li>'
            echo '            <li>Storage quota typically refreshes within 6-12 hours</li>'
            echo '            <li>Check previous reports in the historical archive</li>'
            echo '        </ul>'
            echo '    </div>'
            echo '    <p><a href="../index.html">‚Üê Back to Reports Archive</a></p>'
            echo "    <p style=\"color: #666; font-size: 0.9em;\">Generated at: \$(date)</p>"
            echo '</body>'
            echo '</html>'
          } > ./reports-temp/index.html

      - name: Organize reports
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          WORKFLOW_NAME="${{ github.event.workflow_run.name || github.event.inputs.source_workflow }}"
          RUN_NUMBER="${{ github.event.workflow_run.run_number || github.run_number }}"
          WORKFLOW_DIR=$(echo "$WORKFLOW_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')

          if [ -d "./reports-temp" ] && [ "$(ls -A ./reports-temp)" ]; then
            # For manual dispatch, try to extract the actual run number from the downloaded artifact
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              # Look for any artifact info files or try to determine from the content
              if ls ./reports-temp/*/trace/*.json 2>/dev/null | head -1 | xargs grep -o "run-[0-9]*" | head -1; then
                ACTUAL_RUN=$(ls ./reports-temp/*/trace/*.json 2>/dev/null | head -1 | xargs grep -o "run-[0-9]*" | head -1 | sed 's/run-//')
                if [ -n "$ACTUAL_RUN" ]; then
                  RUN_NUMBER="$ACTUAL_RUN"
                  echo "Detected actual run number: $RUN_NUMBER"
                fi
              fi
            fi
            
            # Create directories and copy reports
            mkdir -p "./reports/${WORKFLOW_DIR}/${TIMESTAMP}_run-${RUN_NUMBER}" "./latest/${WORKFLOW_DIR}"
            cp -r ./reports-temp/* "./reports/${WORKFLOW_DIR}/${TIMESTAMP}_run-${RUN_NUMBER}/"
            cp -r ./reports-temp/* "./latest/${WORKFLOW_DIR}/"
            
            echo "‚úÖ Reports organized successfully"
            echo "REPORTS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è No reports found or reports directory is empty"
            echo "This likely indicates an artifact upload/download issue"
            
            # Create placeholder directories anyway for consistency
            mkdir -p "./reports/${WORKFLOW_DIR}/${TIMESTAMP}_run-${RUN_NUMBER}" "./latest/${WORKFLOW_DIR}"
            
            # Create a placeholder file explaining the situation
            {
              echo '<!DOCTYPE html>'
              echo '<html>'
              echo '<head>'
              echo '    <title>Test Report - Missing Artifacts</title>'
              echo '    <style>'
              echo '        body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }'
              echo '        .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 20px; border-radius: 8px; margin: 20px 0; }'
              echo '    </style>'
              echo '</head>'
              echo '<body>'
              echo '    <h1>üé≠ Test Report Unavailable</h1>'
              echo '    <div class="warning">'
              echo '        <h3>‚ö†Ô∏è Artifacts Not Available</h3>'
              echo '        <p>Test reports could not be deployed due to missing artifacts.</p>'
              echo '        <p>This typically happens when GitHub storage quota is exceeded.</p>'
              echo '    </div>'
              echo '    <p><a href="../../index.html">‚Üê Back to Reports Archive</a></p>'
              echo '</body>'
              echo '</html>'
            } > "./latest/${WORKFLOW_DIR}/index.html"
            
            cp "./latest/${WORKFLOW_DIR}/index.html" "./reports/${WORKFLOW_DIR}/${TIMESTAMP}_run-${RUN_NUMBER}/index.html"
            echo "REPORTS_AVAILABLE=false" >> $GITHUB_ENV
          fi

          # Store for commit message
          echo "WORKFLOW_DIR=${WORKFLOW_DIR}" >> $GITHUB_ENV
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          echo "ACTUAL_RUN_NUMBER=${RUN_NUMBER}" >> $GITHUB_ENV

      - name: Cleanup old reports (keep last 10 per workflow)
        run: |
          if [ -d "./reports" ]; then
              for workflow in ./reports/*/; do
                  if [ -d "$workflow" ]; then
                      # Keep only the 10 most recent reports per workflow
                      cd "$workflow"
                      ls -t | tail -n +11 | xargs -r rm -rf
                      cd - > /dev/null
                  fi
              done
          fi

      - name: Generate index page
        run: |
          {
            echo '<!DOCTYPE html>'
            echo '<html>'
            echo '<head>'
            echo '    <title>Playwright Test Reports</title>'
            echo '    <style>'
            echo '        body { font-family: Arial, sans-serif; margin: 40px; }'
            echo '        .header { border-bottom: 2px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }'
            echo '        .section { margin-bottom: 30px; }'
            echo '        .latest-reports { background: #f5f5f5; padding: 20px; border-radius: 8px; }'
            echo '        .historical-reports { margin-top: 30px; }'
            echo '        .workflow-group { margin-bottom: 25px; border: 1px solid #ddd; border-radius: 8px; }'
            echo '        .workflow-header { background: #f8f9fa; padding: 15px; font-weight: bold; border-bottom: 1px solid #ddd; }'
            echo '        .report-list { padding: 15px; }'
            echo '        .report-item { margin: 8px 0; }'
            echo '        .report-link { color: #0366d6; text-decoration: none; }'
            echo '        .report-link:hover { text-decoration: underline; }'
            echo '        .timestamp { color: #666; font-size: 0.9em; }'
            echo '        .latest-badge { background: #28a745; color: white; padding: 2px 8px; border-radius: 12px; font-size: 0.8em; }'
          } > index.html

          echo "              </style>" >> index.html
          echo "          </head>" >> index.html
          echo "          <body>" >> index.html
          echo "              <div class=\"header\">" >> index.html
          echo "                  <h1>üé≠ Playwright Test Reports</h1>" >> index.html
          echo "                  <p>Historical test reports archive</p>" >> index.html
          echo "              </div>" >> index.html

          # Latest reports section
          echo "              <div class=\"section latest-reports\">" >> index.html
          echo "                  <h2>üìä Latest Reports</h2>" >> index.html

          if [ -d "./latest" ]; then
              for workflow in ./latest/*/; do
                  if [ -d "$workflow" ]; then
                      workflow_name=$(basename "$workflow")
                      echo "                  <div class=\"report-item\">" >> index.html
                      echo "                      <a href=\"./latest/$workflow_name/index.html\" class=\"report-link\">" >> index.html
                      echo "                          ${workflow_name} <span class=\"latest-badge\">LATEST</span>" >> index.html
                      echo "                      </a>" >> index.html
                      echo "                  </div>" >> index.html
                  fi
              done
          fi

          echo "              </div>" >> index.html

          # Historical reports section
          echo "              <div class=\"section historical-reports\">" >> index.html
          echo "                  <h2>üìö Historical Reports</h2>" >> index.html

          if [ -d "./reports" ]; then
              for workflow in ./reports/*/; do
                  if [ -d "$workflow" ]; then
                      workflow_name=$(basename "$workflow")
                      echo "                  <div class=\"workflow-group\">" >> index.html
                      echo "                      <div class=\"workflow-header\">$workflow_name</div>" >> index.html
                      echo "                      <div class=\"report-list\">" >> index.html
                      
                      # List reports in reverse chronological order
                      for report in $(ls -t "$workflow"/); do
                          if [ -d "$workflow/$report" ]; then
                              # Extract timestamp and run number for display
                              display_name=$(echo "$report" | sed 's/_/ /g')
                              echo "                          <div class=\"report-item\">" >> index.html
                              echo "                              <a href=\"./reports/$workflow_name/$report/index.html\" class=\"report-link\">" >> index.html
                              echo "                                  $display_name" >> index.html
                              echo "                              </a>" >> index.html
                              echo "                              <span class=\"timestamp\">$(date -d "${report%_run-*}" +"%B %d, %Y at %H:%M" 2>/dev/null || echo "${report%_run-*}")</span>" >> index.html
                              echo "                          </div>" >> index.html
                          fi
                      done
                      
                      echo "                      </div>" >> index.html
                      echo "                  </div>" >> index.html
                  fi
              done
          fi

          echo "              </div>" >> index.html
          echo "              <div style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 0.9em;\">" >> index.html
          echo "                  Last updated: $(date)" >> index.html
          echo "              </div>" >> index.html
          echo "          </body>" >> index.html
          echo "          </html>" >> index.html

      - name: Cleanup old reports (keep last 10 per workflow)
        run: |
          if [ -d "./reports" ]; then
              for workflow in ./reports/*/; do
                  if [ -d "$workflow" ]; then
                      # Keep only the 10 most recent reports per workflow
                      cd "$workflow"
                      ls -t | tail -n +11 | xargs -r rm -rf
                      cd - > /dev/null
                  fi
              done
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Add deployment status to summary
        run: |
          echo "## üé≠ Playwright Reports Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$REPORTS_AVAILABLE" = "true" ]; then
            echo "‚úÖ **Status:** Reports deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìä **Report URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
            echo "üìö **Latest Report:** ${{ steps.deployment.outputs.page_url }}latest/${WORKFLOW_DIR}/" >> $GITHUB_STEP_SUMMARY
            echo "üóÇÔ∏è **Historical Archive:** ${{ steps.deployment.outputs.page_url }}reports/${WORKFLOW_DIR}/" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Status:** Deployment completed but artifacts were unavailable" >> $GITHUB_STEP_SUMMARY
            echo "üì¶ **Issue:** Likely GitHub storage quota exceeded" >> $GITHUB_STEP_SUMMARY
            echo "üîß **Action:** Reports will auto-deploy once quota is available" >> $GITHUB_STEP_SUMMARY
            echo "üìä **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
            echo "üìã **Placeholder:** Created with explanation of the issue" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚è∞ **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY
