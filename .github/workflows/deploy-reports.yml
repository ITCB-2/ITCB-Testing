name: Deploy Playwright HTML Report to GitHub Pages

on:
  # Triggered by other workflows completing
  workflow_run:
    workflows: ['Sanity Tests', 'Regression Tests']
    types:
      - completed

  # Manual trigger for deployment
  workflow_dispatch:
    inputs:
      source_workflow:
        description: 'Source workflow to deploy reports from'
        required: true
        default: 'sanity-tests'
        type: choice
        options:
          - sanity-tests
          - nightly-regression-tests

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' || 
      github.event.workflow_run.conclusion == 'failure' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Create reports directory structure
        run: |
          mkdir -p reports latest

      - name: Set workflow variables
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            RUN_NUMBER="${{ github.event.workflow_run.run_number }}"
          else
            WORKFLOW_NAME="${{ github.event.inputs.source_workflow }}"
            RUN_NUMBER="${{ github.run_number }}"
          fi

          # Set artifact name based on workflow
          case "$WORKFLOW_NAME" in
            *"Sanity"*|*"sanity"*) ARTIFACT_NAME="sanity-playwright-report-$RUN_NUMBER" ;;
            *"Regression"*|*"regression"*) ARTIFACT_NAME="regression-playwright-report-$RUN_NUMBER" ;;
            *) ARTIFACT_NAME="playwright-report-$RUN_NUMBER" ;;
          esac

          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV
          echo "RUN_NUMBER=$RUN_NUMBER" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV
          echo "WORKFLOW_DIR=$(echo "$WORKFLOW_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

          # For manual dispatch, we'll get the actual run number from the downloaded artifact later
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "MANUAL_DISPATCH=true" >> $GITHUB_ENV
          fi

      - name: Download artifacts
        uses: dawidd6/action-download-artifact@v11
        id: download-artifacts
        continue-on-error: true
        with:
          name: ${{ github.event_name == 'workflow_run' && (contains(github.event.workflow_run.name, 'Sanity') && format('sanity-playwright-report-{0}', github.event.workflow_run.run_number) || contains(github.event.workflow_run.name, 'Regression') && format('regression-playwright-report-{0}', github.event.workflow_run.run_number) || format('playwright-report-{0}', github.event.workflow_run.run_number)) || (github.event.inputs.source_workflow == 'sanity-tests' && 'sanity-playwright-report-*' || github.event.inputs.source_workflow == 'regression-tests' && 'regression-playwright-report-*' || 'playwright-report-*') }}
          path: ./reports-temp/
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.id || '' }}
          workflow: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.source_workflow == 'sanity-tests' && 'sanity.yml' || 'nightly-regression.yml') || '' }}
          if_no_artifact_found: warn
          name_is_regexp: ${{ github.event_name == 'workflow_dispatch' && 'true' || 'false' }}

      - name: Handle missing artifacts
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "⚠️ Failed to download artifacts - Playwright report could not be deployed"
          echo "📊 This usually happens when:"
          echo "  - GitHub storage quota is exceeded"
          echo "  - Artifacts weren't uploaded due to quota limits"
          echo "  - Artifact retention period expired"

      - name: Deploy Playwright report directly
        run: |
          if [ -d "./reports-temp" ] && [ "$(ls -A ./reports-temp)" ]; then
            # Find the first artifact directory and deploy its contents directly as the root
            FIRST_ARTIFACT_DIR=$(find ./reports-temp -mindepth 1 -maxdepth 1 -type d | head -1)
            if [ -n "$FIRST_ARTIFACT_DIR" ] && [ -d "$FIRST_ARTIFACT_DIR" ]; then
              # Copy the Playwright report contents directly to the root
              cp -r "$FIRST_ARTIFACT_DIR"/* ./
              echo "✅ Playwright report deployed directly to root"
              echo "REPORTS_AVAILABLE=true" >> $GITHUB_ENV
            else
              # Fallback: copy contents directly
              cp -r ./reports-temp/* ./
              echo "✅ Playwright report deployed directly to root (fallback)"
              echo "REPORTS_AVAILABLE=true" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ No reports found - no deployment will occur"
            echo "REPORTS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v4
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: Add deployment status to summary
        run: |
          echo "🎭 Playwright Report Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "$REPORTS_AVAILABLE" = "true" ]; then
            echo "✅ Status: Playwright HTML report deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "📊 Direct Report URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
            echo "🎯 Access: GitHub Pages now opens directly to the Playwright test report" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Status: Deployment completed but test artifacts were unavailable" >> $GITHUB_STEP_SUMMARY
            echo "📦 Issue: Likely GitHub storage quota exceeded or test artifacts missing" >> $GITHUB_STEP_SUMMARY
            echo "🔧 Action: Reports will auto-deploy once quota is available" >> $GITHUB_STEP_SUMMARY
            echo "📊 Site URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
            echo "📋 Placeholder: Created with explanation of the issue" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⏰ Deployed at: $(TZ='Asia/Jerusalem' date '+%B %d, %Y at %H:%M %Z')" >> $GITHUB_STEP_SUMMARY
