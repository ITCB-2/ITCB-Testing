name: Slack Notifications

on:
  # Triggered when deploy-reports workflow completes
  workflow_run:
    workflows: ['Deploy Playwright HTML Report to GitHub Pages']
    types:
      - completed

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      status:
        description: 'Test notification status'
        required: true
        default: 'success'
        type: choice
        options:
          - success
          - failure

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Get test and deployment status
        id: status
        run: |
          # Default values for manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deployment_status=${{ github.event.inputs.status }}" >> $GITHUB_OUTPUT
            echo "trigger=manual" >> $GITHUB_OUTPUT
            echo "test_status=skipped" >> $GITHUB_OUTPUT
            echo "workflow_name=Manual Test" >> $GITHUB_OUTPUT
            echo "artifact_issue=false" >> $GITHUB_OUTPUT
          else
            # Get deployment status from deploy-reports workflow
            echo "deployment_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
            echo "trigger=auto" >> $GITHUB_OUTPUT
            
            # For workflow_run events, we can access the triggering workflow information
            # The deploy-reports workflow is triggered by completed test workflows
            
            # Get the actual test workflow conclusion from the deployment workflow context
            # The deploy-reports workflow is triggered by test workflows and we need to find the original test status
            
            # Get triggering workflow info
            TRIGGERING_WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            TRIGGERING_HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
            
            echo "Processing deployment for: $TRIGGERING_WORKFLOW_NAME" >&2
            echo "Head SHA: $TRIGGERING_HEAD_SHA" >&2
            
            # Get the actual test workflow conclusion by querying GitHub API
            # We need to find the test workflow run that triggered this deployment
            REPO="${{ github.repository }}"
            TOKEN="${{ secrets.GITHUB_TOKEN }}"
            
            # Find the most recent test workflow run for this commit
            echo "Searching for test workflow runs for commit: $TRIGGERING_HEAD_SHA" >&2
            
            # Query for Sanity Tests workflow runs with the same head SHA (with retry)
            echo "Querying for Sanity Tests workflow..." >&2
            for i in {1..3}; do
              SANITY_STATUS=$(curl -s -H "Authorization: token $TOKEN" \
                "https://api.github.com/repos/$REPO/actions/workflows/sanity.yml/runs?head_sha=$TRIGGERING_HEAD_SHA&per_page=1" \
                | jq -r '.workflow_runs[0].conclusion // "not_found"')
              
              if [ "$SANITY_STATUS" != "not_found" ] && [ "$SANITY_STATUS" != "null" ]; then
                echo "Found Sanity workflow on attempt $i: $SANITY_STATUS" >&2
                break
              fi
              echo "Sanity query attempt $i: $SANITY_STATUS (retrying...)" >&2
              sleep 2
            done
            
            # Query for Regression Tests workflow runs with the same head SHA (with retry)
            echo "Querying for Regression Tests workflow..." >&2  
            for i in {1..3}; do
              REGRESSION_STATUS=$(curl -s -H "Authorization: token $TOKEN" \
                "https://api.github.com/repos/$REPO/actions/workflows/nightly-regression.yml/runs?head_sha=$TRIGGERING_HEAD_SHA&per_page=1" \
                | jq -r '.workflow_runs[0].conclusion // "not_found"')
              
              if [ "$REGRESSION_STATUS" != "not_found" ] && [ "$REGRESSION_STATUS" != "null" ]; then
                echo "Found Regression workflow on attempt $i: $REGRESSION_STATUS" >&2
                break
              fi
              echo "Regression query attempt $i: $REGRESSION_STATUS (retrying...)" >&2
              sleep 2
            done
            
            echo "Sanity workflow status: $SANITY_STATUS" >&2
            echo "Regression workflow status: $REGRESSION_STATUS" >&2
            
            # Also check for any recent test workflows in the last 6 hours as fallback
            RECENT_WORKFLOWS=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO/actions/runs?per_page=10&created=>=2025-09-03T02:00:00Z" \
              | jq -r '.workflow_runs[] | select(.name | test("Sanity|Regression")) | select(.head_sha == "'$TRIGGERING_HEAD_SHA'") | .conclusion' \
              | head -1)
            
            echo "Recent workflow check: $RECENT_WORKFLOWS" >&2
            
            # Determine the actual test status and workflow name
            if [ "$SANITY_STATUS" != "not_found" ] && [ "$SANITY_STATUS" != "null" ]; then
              TEST_STATUS="$SANITY_STATUS"
              WORKFLOW_NAME="Sanity Tests"
              echo "Found Sanity Tests run with status: $TEST_STATUS" >&2
            elif [ "$REGRESSION_STATUS" != "not_found" ] && [ "$REGRESSION_STATUS" != "null" ]; then
              TEST_STATUS="$REGRESSION_STATUS"
              WORKFLOW_NAME="Regression Tests"
              echo "Found Regression Tests run with status: $TEST_STATUS" >&2
            else
              # Fallback: check if deployment failed due to missing artifacts (indicates test failure)
              if [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
                TEST_STATUS="failure"
                WORKFLOW_NAME="Unknown Test"
                echo "Deployment failed - likely due to test failure" >&2
              else
                TEST_STATUS="unknown"
                WORKFLOW_NAME="Unknown Test"
                echo "Could not determine test status" >&2
              fi
            fi
            
            # Check if this is an artifact/deployment issue
            ARTIFACT_ISSUE="false"
            if [ "$TEST_STATUS" == "success" ] && [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
              ARTIFACT_ISSUE="true"
              echo "Tests passed but deployment failed - artifact issue" >&2
            fi
            
            # Additional context from the deploy workflow event
            DEPLOY_CREATED_AT="${{ github.event.workflow_run.created_at }}"
            echo "Deploy workflow created at: $DEPLOY_CREATED_AT" >&2
            
            echo "test_status=${TEST_STATUS}" >> $GITHUB_OUTPUT
            echo "workflow_name=${WORKFLOW_NAME}" >> $GITHUB_OUTPUT
            echo "artifact_issue=${ARTIFACT_ISSUE}" >> $GITHUB_OUTPUT
                     
            # Debug output
            echo "Final values:" >&2
            echo "  deployment_status: ${{ github.event.workflow_run.conclusion }}" >&2
            echo "  test_status: ${TEST_STATUS}" >&2
            echo "  workflow_name: ${WORKFLOW_NAME}" >&2
            echo "  artifact_issue: ${ARTIFACT_ISSUE}" >&2
            echo "  triggering_workflow: $TRIGGERING_WORKFLOW_NAME" >&2
          fi

          # Get current date/time in Israel timezone
          ISRAEL_TIME=$(TZ='Asia/Jerusalem' date '+%d-%m-%Y %H:%M:%S')
          echo "israel_time=$ISRAEL_TIME" >> $GITHUB_OUTPUT

      - name: Notify Slack on Test Success
        if: steps.status.outputs.test_status == 'success'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "‚úÖ Test Workflow Completed Successfully!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚úÖ Test Workflow Completed Successfully!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üß™ Test Workflow Status\n\n*Workflow:* ${{ steps.status.outputs.workflow_name }}\n*Status:* ‚úÖ PASSED\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üìä Report Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '‚úÖ DEPLOYED SUCCESSFULLY' || '‚ö†Ô∏è DEPLOYMENT HAD ISSUES' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.status.outputs.deployment_status == 'success' && 'üéâ Great work! All tests passed and reports are now live!' || '‚úÖ Tests passed but there were deployment issues. Reports may be delayed.' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Test Failure
        if: steps.status.outputs.test_status == 'failure'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "‚ùå Tests Failed!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "‚ùå Tests Failed!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üß™ Test Workflow Status\n\n*Workflow:* ${{ steps.status.outputs.workflow_name }}\n*Status:* ‚ùå FAILED\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üìä Report Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '‚úÖ REPORTS DEPLOYED (Failed Test Results)' || '‚ùå DEPLOYMENT ALSO FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ö†Ô∏è **Action Required:** Some tests failed. Check the detailed test report above to see which tests need attention."
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "üìã Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Unknown Test Status
        if: steps.status.outputs.test_status == 'unknown'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "ü§∑ Test Status Unknown - Deployment Completed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "ü§∑ Test Status Unknown"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚ö†Ô∏è **Unable to determine test results**\n\nNo test workflows (Sanity or Regression) were found for this deployment.\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üìä Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '‚úÖ DEPLOYED SUCCESSFULLY' || '‚ùå DEPLOYMENT FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üîç **Possible reasons:**\n‚Ä¢ Direct deployment trigger without tests\n‚Ä¢ Test workflows didn't complete before deployment\n‚Ä¢ Test workflows failed to create artifacts\n‚Ä¢ Manual deployment execution"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "üìã Deployment Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Add notification status to summary
        run: |
          echo "üì± Slack Notification Sent!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä Deployment Status: ${{ steps.status.outputs.deployment_status }}" >> $GITHUB_STEP_SUMMARY
          echo "üß™ Test Status: ${{ steps.status.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
          echo "üîÑ Workflow: ${{ steps.status.outputs.workflow_name }}" >> $GITHUB_STEP_SUMMARY
          echo "üîî Trigger: ${{ steps.status.outputs.trigger }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.status.outputs.artifact_issue }}" == "true" ]; then
            echo "üì¶ Artifact Issue: GitHub storage quota exceeded" >> $GITHUB_STEP_SUMMARY
            echo "‚è≥ Note: Storage quota typically refreshes within 6-12 hours" >> $GITHUB_STEP_SUMMARY
          fi
          echo "‚è∞ Sent at: ${{ steps.status.outputs.israel_time }} (IDT)" >> $GITHUB_STEP_SUMMARY
