name: Slack Notifications

on:
  # Triggered when deploy-reports workflow completes
  workflow_run:
    workflows: ['Deploy Playwright HTML Report to GitHub Pages']
    types:
      - completed

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      status:
        description: 'Test notification status'
        required: true
        default: 'success'
        type: choice
        options:
          - success
          - failure

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Get test and deployment status
        id: status
        run: |
          # Default values for manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deployment_status=${{ github.event.inputs.status }}" >> $GITHUB_OUTPUT
            echo "trigger=manual" >> $GITHUB_OUTPUT
            echo "test_status=skipped" >> $GITHUB_OUTPUT
            echo "workflow_name=Manual Test" >> $GITHUB_OUTPUT
            echo "artifact_issue=false" >> $GITHUB_OUTPUT
          else
            # Get deployment status from deploy-reports workflow
            echo "deployment_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
            echo "trigger=auto" >> $GITHUB_OUTPUT
            
            # For workflow_run events, we can access the triggering workflow information
            # The deploy-reports workflow is triggered by completed test workflows
            
            # Get the actual test workflow conclusion from the deployment workflow context
            # The deploy-reports workflow is triggered by test workflows and we need to find the original test status
            
            # The Slack workflow is triggered by Deploy workflow completion
            # The Deploy workflow is triggered by test workflow completion  
            # We need to find which test workflow originally triggered the deployment
            
            # Get the Deploy workflow information
            DEPLOY_WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            DEPLOY_HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
            DEPLOY_RUN_ID="${{ github.event.workflow_run.id }}"
            
            echo "Deploy workflow: $DEPLOY_WORKFLOW_NAME" >&2
            echo "Deploy HEAD SHA: $DEPLOY_HEAD_SHA" >&2
            echo "Deploy Run ID: $DEPLOY_RUN_ID" >&2
            
            # Query the Deploy workflow run to find which test workflow triggered it
            REPO="${{ github.repository }}"
            TOKEN="${{ secrets.GITHUB_TOKEN }}"
            
            echo "Getting deploy workflow details..." >&2
            DEPLOY_DETAILS=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO/actions/runs/$DEPLOY_RUN_ID")
            
            # Check if API response is valid
            if [ "$DEPLOY_DETAILS" = "null" ] || [ -z "$DEPLOY_DETAILS" ]; then
              echo "Warning: Could not get deploy workflow details" >&2
              TRIGGERING_WORKFLOW_NAME="unknown"
            else
              TRIGGERING_WORKFLOW_NAME=$(echo "$DEPLOY_DETAILS" | jq -r '.triggering_actor.login // "unknown"' 2>/dev/null || echo "unknown")
            fi
            echo "Deploy triggered by: $TRIGGERING_WORKFLOW_NAME" >&2
            
            # Find the most recent test workflow run for this commit
            echo "Searching for test workflow runs for commit: $TRIGGERING_HEAD_SHA" >&2
            
            # Simple approach: Find the most recent test workflows for this commit
            echo "Finding test workflows for commit SHA: $DEPLOY_HEAD_SHA" >&2
            
            # Enhanced multi-strategy approach to find test workflows
            echo "Querying GitHub API for workflow runs (Strategy 1: By commit SHA)..." >&2
            WORKFLOWS_RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$REPO/actions/runs?per_page=100")
            
            # Debug: Check API response status
            API_STATUS=$(echo "$WORKFLOWS_RESPONSE" | jq -r '.message // "success"' 2>/dev/null || echo "parse_error")
            echo "API Response Status: $API_STATUS" >&2
            
            RECENT_RUNS=""
            
            # Strategy 1: Exact commit SHA match
            if [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ] && [ "$API_STATUS" = "success" ]; then
              WORKFLOW_RUNS_CHECK=$(echo "$WORKFLOWS_RESPONSE" | jq -r '.workflow_runs // empty' 2>/dev/null)
              if [ ! -z "$WORKFLOW_RUNS_CHECK" ] && [ "$WORKFLOW_RUNS_CHECK" != "null" ]; then
                RECENT_RUNS=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg sha "$DEPLOY_HEAD_SHA" \
                  '.workflow_runs[]? | select(.head_sha == $sha and (.name == "Sanity Tests" or .name == "Regression Tests")) | "\(.name):\(.conclusion)"' 2>/dev/null || echo "")
                echo "Strategy 1 - Found workflows by exact SHA: $(echo "$RECENT_RUNS" | wc -l) matches" >&2
              fi
            fi
            
            # Strategy 2: If no exact match, find most recent test workflows within time window
            if [ -z "$RECENT_RUNS" ] && [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ]; then
              echo "Strategy 2: Looking for recent test workflows within 1 hour of deploy..." >&2
              DEPLOY_TIMESTAMP="${{ github.event.workflow_run.created_at }}"
              echo "Deploy created at: $DEPLOY_TIMESTAMP" >&2
              
              # Get timestamp 1 hour before deploy
              SEARCH_CUTOFF=$(date -d "$DEPLOY_TIMESTAMP - 1 hour" -Iseconds 2>/dev/null || date -u -d "$DEPLOY_TIMESTAMP - 1 hour" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || echo "")
              echo "Searching for tests created after: $SEARCH_CUTOFF" >&2
              
              if [ ! -z "$SEARCH_CUTOFF" ]; then
                RECENT_RUNS=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg cutoff "$SEARCH_CUTOFF" \
                  '.workflow_runs[]? | select((.name == "Sanity Tests" or .name == "Regression Tests") and .created_at >= $cutoff) | "\(.name):\(.conclusion)" ' 2>/dev/null | head -2 || echo "")
                echo "Strategy 2 - Found workflows by time window: $(echo "$RECENT_RUNS" | wc -l) matches" >&2
              fi
            fi
            
            # Strategy 3: Get the most recent test workflows (fallback)
            if [ -z "$RECENT_RUNS" ] && [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ]; then
              echo "Strategy 3: Using most recent test workflows as fallback..." >&2
              RECENT_RUNS=$(echo "$WORKFLOWS_RESPONSE" | jq -r \
                '.workflow_runs[]? | select(.name == "Sanity Tests" or .name == "Regression Tests") | "\(.name):\(.conclusion)"' 2>/dev/null | head -2 || echo "")
              echo "Strategy 3 - Found recent workflows: $(echo "$RECENT_RUNS" | wc -l) matches" >&2
            fi
            
            echo "Found test workflows for this commit:" >&2
            echo "$RECENT_RUNS" >&2
            echo "Total workflow matches found: $(echo "$RECENT_RUNS" | grep -c ":" 2>/dev/null || echo 0)" >&2
            
            # Debug: Show what commits we're actually seeing in recent workflows
            if [ "$WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$WORKFLOWS_RESPONSE" ]; then
              echo "Recent commit SHAs seen in workflow runs:" >&2
              echo "$WORKFLOWS_RESPONSE" | jq -r '.workflow_runs[]? | select(.name == "Sanity Tests" or .name == "Regression Tests") | "\(.head_sha) - \(.name) - \(.conclusion // "running")"' 2>/dev/null | head -5 >&2
              echo "Target commit SHA: $DEPLOY_HEAD_SHA" >&2
            fi
            
            # Extract statuses
            SANITY_STATUS=$(echo "$RECENT_RUNS" | grep "^Sanity Tests:" | cut -d: -f2 | head -1)
            REGRESSION_STATUS=$(echo "$RECENT_RUNS" | grep "^Regression Tests:" | cut -d: -f2 | head -1)
            
            # Set defaults if not found
            SANITY_STATUS=${SANITY_STATUS:-"not_found"}
            REGRESSION_STATUS=${REGRESSION_STATUS:-"not_found"}
            
            echo "Sanity workflow status: $SANITY_STATUS" >&2
            echo "Regression workflow status: $REGRESSION_STATUS" >&2
            
            # Determine the actual test status and workflow name with improved logic
            if [ "$SANITY_STATUS" != "not_found" ] && [ "$SANITY_STATUS" != "null" ]; then
              TEST_STATUS="$SANITY_STATUS"
              WORKFLOW_NAME="Sanity Tests"
              echo "Found Sanity Tests run with status: $TEST_STATUS" >&2
            elif [ "$REGRESSION_STATUS" != "not_found" ] && [ "$REGRESSION_STATUS" != "null" ]; then
              TEST_STATUS="$REGRESSION_STATUS"
              WORKFLOW_NAME="Regression Tests"
              echo "Found Regression Tests run with status: $TEST_STATUS" >&2
            else
              # Enhanced fallback: Try multiple approaches to find recent test workflows
              echo "No workflows found for this commit, trying enhanced fallback strategies..." >&2
              
              # Strategy A: Direct query for recent test workflows
              RECENT_WORKFLOWS_RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
                "https://api.github.com/repos/$REPO/actions/runs?per_page=20")
              
              RECENT_TEST=""
              
              # Check if API response is valid
              if [ "$RECENT_WORKFLOWS_RESPONSE" != "null" ] && [ ! -z "$RECENT_WORKFLOWS_RESPONSE" ]; then
                # Strategy A1: Look for workflows in the last 2 hours
                DEPLOY_TIMESTAMP="${{ github.event.workflow_run.created_at }}"
                SEARCH_CUTOFF=$(date -d "$DEPLOY_TIMESTAMP - 2 hours" -Iseconds 2>/dev/null || date -u -d "$DEPLOY_TIMESTAMP - 2 hours" +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || echo "")
                
                if [ ! -z "$SEARCH_CUTOFF" ]; then
                  echo "Fallback Strategy A1: Looking for test workflows after $SEARCH_CUTOFF" >&2
                  RECENT_TEST=$(echo "$RECENT_WORKFLOWS_RESPONSE" | jq -r --arg cutoff "$SEARCH_CUTOFF" \
                    '.workflow_runs[]? | select((.name == "Sanity Tests" or .name == "Regression Tests") and .created_at >= $cutoff and .conclusion != null) | "\(.name):\(.conclusion)" ' 2>/dev/null | head -1 || echo "")
                fi
                
                # Strategy A2: If time-based search fails, get the most recent completed test workflow
                if [ -z "$RECENT_TEST" ] || [ "$RECENT_TEST" = "null" ]; then
                  echo "Fallback Strategy A2: Looking for most recent completed test workflow" >&2
                  RECENT_TEST=$(echo "$RECENT_WORKFLOWS_RESPONSE" | jq -r \
                    '.workflow_runs[]? | select((.name == "Sanity Tests" or .name == "Regression Tests") and .conclusion != null) | "\(.name):\(.conclusion)" ' 2>/dev/null | head -1 || echo "")
                fi
                
                # Strategy A3: If still nothing, get any recent test workflow regardless of completion
                if [ -z "$RECENT_TEST" ] || [ "$RECENT_TEST" = "null" ]; then
                  echo "Fallback Strategy A3: Looking for any recent test workflow" >&2
                  RECENT_TEST=$(echo "$RECENT_WORKFLOWS_RESPONSE" | jq -r \
                    '.workflow_runs[]? | select(.name == "Sanity Tests" or .name == "Regression Tests") | "\(.name):\(.conclusion // "in_progress")" ' 2>/dev/null | head -1 || echo "")
                fi
              fi
              
              if [ ! -z "$RECENT_TEST" ] && [ "$RECENT_TEST" != "null" ]; then
                TEST_STATUS=$(echo "$RECENT_TEST" | cut -d: -f2)
                WORKFLOW_NAME=$(echo "$RECENT_TEST" | cut -d: -f1)
                echo "Using fallback test workflow: $WORKFLOW_NAME with status: $TEST_STATUS" >&2
              else
                # Last resort: Check deployment status to infer test status
                echo "All fallback strategies failed, inferring from deployment status..." >&2
                if [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
                  TEST_STATUS="failure"
                  WORKFLOW_NAME="Inferred Test"
                  echo "Deployment failed - inferring test failure" >&2
                else
                  # Check if we can find ANY workflow for this commit (not just test workflows)
                  ANY_WORKFLOW=$(echo "$WORKFLOWS_RESPONSE" | jq -r --arg sha "$DEPLOY_HEAD_SHA" \
                    '.workflow_runs[]? | select(.head_sha == $sha) | .name' 2>/dev/null | head -1 || echo "")
                  
                  if [ ! -z "$ANY_WORKFLOW" ] && [ "$ANY_WORKFLOW" != "null" ]; then
                    TEST_STATUS="unknown"
                    WORKFLOW_NAME="Found Commit Workflows"
                    echo "Found workflows for commit but no test workflows - status unknown" >&2
                  else
                    TEST_STATUS="unknown"
                    WORKFLOW_NAME="No Matching Workflows"
                    echo "Could not find any workflows for this commit SHA" >&2
                  fi
                fi
              fi
            fi
            
            # Check if this is an artifact/deployment issue
            ARTIFACT_ISSUE="false"
            if [ "$TEST_STATUS" == "success" ] && [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
              ARTIFACT_ISSUE="true"
              echo "Tests passed but deployment failed - artifact issue" >&2
            fi
            
            # Additional context from the deploy workflow event
            DEPLOY_CREATED_AT="${{ github.event.workflow_run.created_at }}"
            echo "Deploy workflow created at: $DEPLOY_CREATED_AT" >&2
            
            echo "test_status=${TEST_STATUS}" >> $GITHUB_OUTPUT
            echo "workflow_name=${WORKFLOW_NAME}" >> $GITHUB_OUTPUT
            echo "artifact_issue=${ARTIFACT_ISSUE}" >> $GITHUB_OUTPUT
                     
            # Debug output
            echo "=== FINAL ANALYSIS ===" >&2
            echo "  deployment_status: ${{ github.event.workflow_run.conclusion }}" >&2
            echo "  test_status: ${TEST_STATUS}" >&2
            echo "  workflow_name: ${WORKFLOW_NAME}" >&2
            echo "  artifact_issue: ${ARTIFACT_ISSUE}" >&2
            echo "  triggering_workflow: $TRIGGERING_WORKFLOW_NAME" >&2
            echo "  deploy_head_sha: $DEPLOY_HEAD_SHA" >&2
            echo "  workflow_detection_method: $([ ! -z "$RECENT_RUNS" ] && echo "commit_sha_match" || echo "fallback_strategy")" >&2
            echo "===================" >&2
          fi

          # Get current date/time in Israel timezone
          ISRAEL_TIME=$(TZ='Asia/Jerusalem' date '+%d-%m-%Y %H:%M:%S')
          echo "israel_time=$ISRAEL_TIME" >> $GITHUB_OUTPUT

      - name: Notify Slack on Test Success
        if: steps.status.outputs.test_status == 'success'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "✅ Test Workflow Completed Successfully!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "✅ Test Workflow Completed Successfully!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🧪 Test Workflow Status\n\n*Workflow:* ${{ steps.status.outputs.workflow_name }}\n*Status:* ✅ PASSED\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 Report Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '✅ DEPLOYED SUCCESSFULLY' || '⚠️ DEPLOYMENT HAD ISSUES' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.status.outputs.deployment_status == 'success' && '🎉 Great work! All tests passed and reports are now live!' || '✅ Tests passed but there were deployment issues. Reports may be delayed.' }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Test Failure
        if: steps.status.outputs.test_status == 'failure'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "❌ Tests Failed!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "❌ Tests Failed!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🧪 Test Workflow Status\n\n*Workflow:* ${{ steps.status.outputs.workflow_name }}\n*Status:* ❌ FAILED\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 Report Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '✅ REPORTS DEPLOYED (Failed Test Results)' || '❌ DEPLOYMENT ALSO FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ **Action Required:** Some tests failed. Check the detailed test report above to see which tests need attention."
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "📋 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Unknown Test Status
        if: steps.status.outputs.test_status == 'unknown'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "🤷 Test Status Unknown - Deployment Completed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🤷 Test Status Unknown"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "⚠️ **Unable to determine test results**\n\nNo test workflows (Sanity or Regression) were found for this deployment.\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📊 Deployment Status\n\n*Status:* ${{ steps.status.outputs.deployment_status == 'success' && '✅ DEPLOYED SUCCESSFULLY' || '❌ DEPLOYMENT FAILED' }}\n*Report URL:* https://itcb-2.github.io/ITCB-Testing/\n*Deployed at:* ${{ steps.status.outputs.israel_time }} (IDT)"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Add notification status to summary
        run: |
          echo "📱 Slack Notification Sent!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Deployment Status: ${{ steps.status.outputs.deployment_status }}" >> $GITHUB_STEP_SUMMARY
          echo "🧪 Test Status: ${{ steps.status.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
          echo "🔄 Workflow: ${{ steps.status.outputs.workflow_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔔 Trigger: ${{ steps.status.outputs.trigger }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.status.outputs.artifact_issue }}" == "true" ]; then
            echo "📦 Artifact Issue: GitHub storage quota exceeded" >> $GITHUB_STEP_SUMMARY
            echo "⏳ Note: Storage quota typically refreshes within 6-12 hours" >> $GITHUB_STEP_SUMMARY
          fi
          echo "⏰ Sent at: ${{ steps.status.outputs.israel_time }} (IDT)" >> $GITHUB_STEP_SUMMARY
