name: Slack Notifications

on:
  # Triggered when deploy-reports workflow completes
  workflow_run:
    workflows: ['Deploy Playwright Reports to GitHub Pages']
    types:
      - completed

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      status:
        description: 'Test notification status'
        required: true
        default: 'success'
        type: choice
        options:
          - success
          - failure

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get test and deployment status
        id: status
        run: |
          # Default values for manual trigger
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "deployment_status=${{ github.event.inputs.status }}" >> $GITHUB_OUTPUT
            echo "trigger=manual" >> $GITHUB_OUTPUT
            echo "test_status=skipped" >> $GITHUB_OUTPUT
            echo "workflow_name=Manual Test" >> $GITHUB_OUTPUT
            echo "artifact_issue=false" >> $GITHUB_OUTPUT
          else
            # Get deployment status from deploy-reports workflow
            echo "deployment_status=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
            echo "trigger=auto" >> $GITHUB_OUTPUT
            
            # Get the deploy workflow run details to find the triggering workflow
            DEPLOY_WORKFLOW_ID="${{ github.event.workflow_run.id }}"
            DEPLOY_RUN_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${DEPLOY_WORKFLOW_ID}")
            
            echo "Deploy workflow data: $DEPLOY_RUN_DATA" >&2
            
            # Extract the triggering workflow info from the deploy run
            TRIGGERING_WORKFLOW_ID=$(echo "$DEPLOY_RUN_DATA" | jq -r '.triggering_actor.login // empty')
            TRIGGERING_WORKFLOW_NAME=$(echo "$DEPLOY_RUN_DATA" | jq -r '.triggering_workflow.name // empty')
            
            # Default values
            TEST_STATUS="unknown"
            WORKFLOW_NAME="Unknown Workflow"
            ARTIFACT_ISSUE="false"
            
            # Check if we have workflow_run trigger data (more reliable)
            if [ -n "$TRIGGERING_WORKFLOW_NAME" ] && [ "$TRIGGERING_WORKFLOW_NAME" != "null" ]; then
              WORKFLOW_NAME="$TRIGGERING_WORKFLOW_NAME"
              echo "Found triggering workflow from deploy run: $WORKFLOW_NAME" >&2
              
              # Look for the actual run of this workflow in recent runs
              RECENT_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=20")
              
              # Find the most recent run of the triggering workflow
              TEST_RUN_DATA=$(echo "$RECENT_RUNS" | jq -r --arg name "$WORKFLOW_NAME" \
                '.workflow_runs[] | select(.name == $name) | select(.created_at > (now - 7200)) | . | @base64' | head -1)
              
              if [ -n "$TEST_RUN_DATA" ] && [ "$TEST_RUN_DATA" != "null" ]; then
                TEST_RUN_DECODED=$(echo "$TEST_RUN_DATA" | base64 -d)
                TEST_STATUS=$(echo "$TEST_RUN_DECODED" | jq -r '.conclusion // "unknown"')
                echo "Found test status: $TEST_STATUS" >&2
              fi
            else
              # Fallback: Look for recent test workflows that might have triggered this
              echo "No triggering workflow found in deploy data, searching for recent test workflows..." >&2
              
              # Get recent workflow runs to find the likely source
              RECENT_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=20")
              
              # Look for the most recent test workflow run (within last 2 hours)
              RECENT_TEST_RUN=$(echo "$RECENT_RUNS" | jq -r \
                '.workflow_runs[] | select(.name | test("Sanity|Regression|Test")) | select(.created_at > (now - 7200)) | "\(.conclusion)|\(.name)|\(.created_at)"' | head -1)
              
              if [ -n "$RECENT_TEST_RUN" ] && [ "$RECENT_TEST_RUN" != "null" ]; then
                TEST_STATUS=$(echo "$RECENT_TEST_RUN" | cut -d'|' -f1)
                WORKFLOW_NAME=$(echo "$RECENT_TEST_RUN" | cut -d'|' -f2)
                echo "Found recent test workflow: $WORKFLOW_NAME with status: $TEST_STATUS" >&2
              fi
            fi
            
            # Check for artifact issues in the deployment
            if [ "${{ github.event.workflow_run.conclusion }}" == "success" ] && [ "$TEST_STATUS" == "success" ]; then
              # If both succeeded, check if there were artifact warnings
              DEPLOY_LOGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/runs/${DEPLOY_WORKFLOW_ID}/logs" 2>/dev/null || echo "")
              
              if echo "$DEPLOY_LOGS" | grep -q "artifact storage quota\|quota exceeded\|if_no_artifact_found.*warn\|No artifacts found"; then
                ARTIFACT_ISSUE="true"
                echo "Detected artifact issue in deployment" >&2
              fi
            elif [ "${{ github.event.workflow_run.conclusion }}" == "failure" ] && [ "$TEST_STATUS" == "success" ]; then
              # If deploy failed but test succeeded, likely an artifact issue
              ARTIFACT_ISSUE="true"
              echo "Deploy failed but test succeeded - likely artifact issue" >&2
            fi
            
            echo "test_status=${TEST_STATUS}" >> $GITHUB_OUTPUT
            echo "workflow_name=${WORKFLOW_NAME}" >> $GITHUB_OUTPUT
            echo "artifact_issue=${ARTIFACT_ISSUE}" >> $GITHUB_OUTPUT
            
            # Debug output
            echo "Final values:" >&2
            echo "  deployment_status: ${{ github.event.workflow_run.conclusion }}" >&2
            echo "  test_status: ${TEST_STATUS}" >&2
            echo "  workflow_name: ${WORKFLOW_NAME}" >&2
            echo "  artifact_issue: ${ARTIFACT_ISSUE}" >&2
          fi

          # Get current date/time in Israel timezone
          ISRAEL_TIME=$(TZ='Asia/Jerusalem' date '+%d-%m-%Y %H:%M:%S')
          echo "israel_time=$ISRAEL_TIME" >> $GITHUB_OUTPUT

      - name: Notify Slack on Success
        if: steps.status.outputs.deployment_status == 'success'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "📊 Test Reports Updated!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "📊 Test Reports Updated!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Hey team! 👋 Our automated Playwright test reports are now live:\n\n🧪 *Test Workflow:* ${{ steps.status.outputs.workflow_name }}\n📋 *Test Status:* ${{ steps.status.outputs.test_status == 'success' && '✅ PASSED' || steps.status.outputs.test_status == 'failure' && '❌ FAILED' || '⏭️ SKIPPED' }}\n\n🏠 *Latest Report:* https://itcb-2.github.io/ITCB-Testing/\n\n${{ steps.status.outputs.test_status == 'success' && '🎉 All tests passed! Great work!' || steps.status.outputs.test_status == 'failure' && '⚠️ Some tests failed. Please check the report for details.' || '📊 Check the report for test results.' }}\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nDeployed at: ${{ steps.status.outputs.israel_time }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: steps.status.outputs.deployment_status == 'failure'
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook-type: incoming-webhook
          payload: |
            {
              "channel": "#testing-updates",
              "text": "❌ Test Report Deployment Failed",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.status.outputs.artifact_issue == 'true' && '⚠️ Test Report Storage Issue' || '❌ Test Report Deployment Failed' }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.status.outputs.artifact_issue == 'true' && 'Tests completed but reports could not be deployed due to GitHub storage quota limits.' || 'There was an issue deploying the latest test reports to GitHub Pages.' }}\n\n🧪 *Original Test Workflow:* ${{ steps.status.outputs.workflow_name }}\n📋 *Test Status:* ${{ steps.status.outputs.test_status == 'success' && '✅ Tests PASSED' || steps.status.outputs.test_status == 'failure' && '❌ Tests FAILED' || steps.status.outputs.test_status == 'unknown' && '❓ Status unknown' || '⏭️ Tests were skipped' }}${{ steps.status.outputs.artifact_issue == 'true' && ' (but deployment failed due to storage quota)' || ' and deployment failed' }}\n${{ steps.status.outputs.artifact_issue == 'true' && '📦 *Issue:* GitHub artifact storage quota exceeded\n⏳ *Note:* Storage quota typically refreshes within 6-12 hours\n🔧 *Action:* Reports will auto-deploy once quota is available' || '🔧 *Action Required:* Please check the deployment workflow logs' }}\n\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\n\n📋 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n${{ steps.status.outputs.artifact_issue == 'true' && '📊 Previous reports still available at:' || 'The team may need to check the previous reports at:' }}\n🔗 https://itcb-2.github.io/ITCB-Testing/"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Add notification status to summary
        run: |
          echo "## 📱 Slack Notification Sent!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Deployment Status:** ${{ steps.status.outputs.deployment_status }}" >> $GITHUB_STEP_SUMMARY
          echo "🧪 **Test Status:** ${{ steps.status.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
          echo "🔄 **Workflow:** ${{ steps.status.outputs.workflow_name }}" >> $GITHUB_STEP_SUMMARY
          echo "🔔 **Trigger:** ${{ steps.status.outputs.trigger }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.status.outputs.artifact_issue }}" == "true" ]; then
            echo "📦 **Artifact Issue:** GitHub storage quota exceeded" >> $GITHUB_STEP_SUMMARY
            echo "⏳ **Note:** Storage quota typically refreshes within 6-12 hours" >> $GITHUB_STEP_SUMMARY
          fi
          echo "⏰ **Sent at:** $(date)" >> $GITHUB_STEP_SUMMARY
